// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;
using System.Diagnostics;

public static class CrashMasterHelper
{	
	const int CRASH_TYPE = 5;

	static bool _ShowDebug = true;
	private static bool isInitialized = false;
    
    [DllImport("__Internal")]
    private static extern void cmasterInit (string appKey, string channel);
    
    [DllImport("__Internal")]
    private static extern void cmasterTerminate ();
	
	[DllImport("__Internal")]
	private static extern void cmasterSetUserInfo (string userInfo);
	
	[DllImport("__Internal")]
	private static extern void cmasterLeaveBreadcrumb (string breadcrumb);
	
	[DllImport("__Internal")]
	private static extern void cmasterReportException (int type, string reason, string stackTrace);

	private static void InitCrashMaster (string appkey, string channel)
	{
		System.Console.Write ("InitForIos");
		try {
			cmasterInit (appkey, channel);
			isInitialized = true;
		} catch {
			System.Console.Write ("CrashMaster failed to initialize.");
		}
	}

	public static void SetUserInfo (string userInfo)
	{
		if (!isInitialized) {
			return;
		}
        cmasterSetUserInfo(userInfo);
	}
	
	public static void leaveBreadcrumb (string breadcrumb)
	{
		if (!isInitialized) {
			return;
		}
		cmasterLeaveBreadcrumb (breadcrumb);
	}

	private static void _OnDebugLogCallbackHandler (string name, string stack, LogType type)
	{
		if (LogType.Assert != type && LogType.Exception != type) {
			return;
		}
		
		if (!isInitialized) {
			return;
		}
		
		try {
			cmasterReportException (CRASH_TYPE, name, stack);
		} catch (System.Exception e) {
			System.Console.Write ("Unable to log a crash exception to CrashMaster to an unexpected error: " + e.ToString ());
		}
	}

	private static void reportException(int type, string name, string message)
	{
		cmasterReportException (type, name, message);
	}
    
    

	public static void Init()
	{
		Init (CrashMasterHelperConfig.appKey, CrashMasterHelperConfig.appChannel);
	}

	public static void Init (string appkey)
	{
		Init (appkey, null);
	}

	public static void Init (string appkey, string channel)
	{
		if (isInitialized) {
			System.Console.Write ("CrashMaster is already initialized.");
			return;
		}
		
		if (_ShowDebug) 
		{
			System.Console.Write ("Initializing CrashMaster with AppKey " + appkey);
		}

		InitCrashMaster (appkey, channel);

		if (isInitialized) {
			System.AppDomain.CurrentDomain.UnhandledException += _OnUnresolvedExceptionHandler;
			Application.RegisterLogCallback (_OnDebugLogCallbackHandler);
		}
	}
    
    public static void Terminate ()
    {
        cmasterTerminate();
    }

	public static void LogHandledException (System.Exception e)
	{
		doLogError (e);
	}
	
	private static void doLogError (System.Exception e)
	{
		if (!isInitialized) {
			return;
		}
		
		StackTrace stackTrace = new StackTrace (e, true);
		string[] classes = new string[stackTrace.FrameCount];
		string[] methods = new string[stackTrace.FrameCount];
		string[] files = new string[stackTrace.FrameCount];
		int[] lineNumbers = new int[stackTrace.FrameCount];

		String message = "";
		
		for (int i = 0; i < stackTrace.FrameCount; i++) {
			StackFrame frame = stackTrace.GetFrame (i);
			classes [i] = frame.GetMethod ().DeclaringType.Name;
			methods [i] = frame.GetMethod ().Name;
			files [i] = frame.GetFileName ();
			lineNumbers [i] = frame.GetFileLineNumber ();

			message += classes[i] + ".";
			message += methods[i] + "() (at ";
			message += files [i] + ":";
			message += lineNumbers[i] + ")";
		}

		cmasterReportException (CRASH_TYPE, e.GetType().Name, message);
	}

	private static void _OnUnresolvedExceptionHandler (object sender, System.UnhandledExceptionEventArgs args)
	{
		if (!isInitialized || args == null || args.ExceptionObject == null) {
			return;
		}
		
		if (args.ExceptionObject.GetType () != typeof(System.Exception)) {
			return;
		}
		
		doLogError ((System.Exception)args.ExceptionObject);
	}
}


